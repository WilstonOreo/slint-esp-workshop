
import { Palette, StyleMetrics } from "style.slint";

import { HorizontalBox, Slider } from "std-widgets.slint";

// Re-export HorizontalBox and Slider from std-widgets.slint
export { HorizontalBox, Slider }

export component Page inherits Rectangle {
    background: #ffffff;
}

export component TitleBar inherits Rectangle {
    in property <string> text <=> text.text;

    width: 100%;
    height: StyleMetrics.title-height;
    padding-top: StyleMetrics.padding;
    padding-bottom: StyleMetrics.padding;
    background: Palette.background;

    text := Text {
        font-size: 16px;
    }
}

export component StatusBar inherits Rectangle {
    in property <string> text <=> text.text;

    height: StyleMetrics.status-height;
    padding-top: StyleMetrics.padding;
    padding-bottom: StyleMetrics.padding;
    background: Palette.alternate-background;

    text := Text {
        width: parent.width;
        horizontal-alignment: center;
        vertical-alignment: center;
    }
}

export component Indicator {
    in property <float> value: 40;
    in property <float> min-value: 0;
    in property <float> max-value: 100;
    in property <string> unit: "°C";
    in property <brush> background <=> fill.background;
    in property <bool> has-value: true;

    // Ensure displayed level stays within min and max.
    out property <float> level: (Math.clamp(self.value, self.min-value, self.max-value) - self.min-value) / (self.max-value - self.min-value);
    
    animate level {
        duration: 1000ms;
    }

    // Right now, fill and bar are on top of each other. But they could also be nested.

    fill := Rectangle {
        x: 0;
        y: parent.height - self.height;
        width: StyleMetrics.indicator-bar-width;
        // Our root is also our parent right now.
        height: root.height * root.level;
        background: Colors.red;
    }

    bar := Rectangle {
        x: 0;
        border-width: 2px;
        width: StyleMetrics.indicator-bar-width;
        height: parent.height;
    }

    value-text := Text {
        text: "" + root.value.round() + " " + root.unit;
        font-size: 32px;
        x: StyleMetrics.indicator-bar-width + StyleMetrics.padding;
    }

    min-text := Text {
        text: "" + Math.round(root.min-value);
        x: StyleMetrics.indicator-bar-width + StyleMetrics.padding;
        y: parent.height - self.height;
    }

    max-text := Text {
        text: "" + root.max-value.round();
        x: StyleMetrics.indicator-bar-width + StyleMetrics.padding;
        y: 0;
    }

    states [
        value when root.has-value: {
            value-text.visible: true;
            fill.visible: true;
            bar.border-color: Palette.foreground;
        }
        no-value when !root.has-value: {
            value-text.visible: false;
            fill.visible: false;
            bar.border-color: Palette.alternate-background;
        }
    ]
}


export component TemperatureBar inherits Indicator {
    value: 20;
    min-value: -20;
    max-value: 50;
    unit: "°C";
    background: #ff0000.mix(#0000ff, root.level);
}

export component HumidityBar inherits Indicator {
    value: 55;
    min-value: 0;
    max-value: 100;
    unit: "%";
    background: #0000ff;
}

export component AppWindow inherits Window {
    in property status-bar-text <=> status-bar.text;

    VerticalLayout {
        TitleBar {
            text: "Slint Weather Station";
        }
        @children

        status-bar := StatusBar {}
    }
}