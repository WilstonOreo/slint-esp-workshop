import { Palette } from "std-widgets.slint";

export global MyStyleMetrics {
    out property <length> padding: 8px;
}

export component StatusBar inherits Rectangle {
    in property <string> text <=> text.text;
    
    height: 24px;
    padding-top: MyStyleMetrics.padding;
    padding-bottom: MyStyleMetrics.padding;
    background: Palette.alternate-background;
    
    text := Text {
        height: parent.height - root.padding-bottom - root.padding-top;
        horizontal-alignment: center;
        vertical-alignment: bottom;
    }
}

export component TitleBar inherits Rectangle {
    in property <string> text <=> text.text;

    //width: 100%;
    height: 30px;
    padding-top: MyStyleMetrics.padding;
    padding-bottom: 5px;
    background: #dddccc;
    text := Text {
        font-size: 16px;
        text: "Text";
    }
}


enum State {
    disabled, enabled
}

export component BarIndicator {
    in property <float> value: 40;
    in property <float> min-value: 0;
    in property <float> max-value: 100;
    property <length> bar-width: 40px;
    in property <string> unit;
    in property <brush> background <=> fill.background;
    in property <bool> has-value: true;

    // Level is between 0 and 1
    out property <float> level: 
        (Math.clamp(self.value, self.min-value, self.max-value) 
            - self.min-value) /
            (self.max-value - self.min-value);
    
    fill := Rectangle {
        x: 0;
        y: parent.height - self.height;
        width: root.bar-width;
        height: parent.height * root.level;
        background: Colors.red;

        animate height {
            duration: 200ms;
            easing: ease-in-out;
        }
    }

    bar := Rectangle {
        x: 0;
        border-width: 2px;
        border-color: #000000;
        width: root.bar-width;
        height: parent.height;
    }

    value-text := Text {
        text: "" + Math.round(root.value) + root.unit;
        font-size: 32px;
        x: root.bar-width;
    }

    states [
        value when root.has-value: {
            value-text.visible: true;
            fill.visible: true;
            bar.border-color: Palette.foreground;
        }
        no-value when !root.has-value: {
            value-text.visible: false;
            fill.visible: false;
            bar.border-color: Palette.alternate-background;
        }
    ]
}
