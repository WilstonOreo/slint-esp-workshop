import { Button, VerticalBox, HorizontalBox, ListView, TabWidget, Slider } from "std-widgets.slint";

import { StatusBar, TitleBar, MyStyleMetrics, BarIndicator } from "widgets.slint";

struct WeatherRecord {
    temperature: float, // Temperature in degrees Celsius
    humidity: float, // Temperature in percent
    timestamp: string,
}

export global ViewModel {
    in property <bool> have-data;
    in property <WeatherRecord> weather;
    in property <[WeatherRecord]> records;
}

component TemperatureBar inherits BarIndicator {
    value: 0;
    min-value: -20;
    max-value: 50;
    unit: "°C";
    background: #FF0000.mix(#0000FF, root.level);
}

component HumidityBar inherits BarIndicator {
    value: 50;
    min-value: 0;
    max-value: 100;
    unit: "%";
    background: #0000FF;
}

export component AppWindow inherits Window {
    in-out property<int> counter: 42;
    callback slider-change(int);
    width: 320px;
    height: 240px;

    VerticalLayout {
        width: 100%;
        height: 100%;

        TitleBar {
            text: "Slint Weather Station";
        }
        TabWidget {
            Tab {
                Slider {
                    changed => { root.slider-change(Math.round(self.value)); }
                    width: 240px;
                    height: 32px;
                }
            }
            Tab {
                title: "Weather";
                HorizontalBox {
                    TemperatureBar {
                        value: ViewModel.weather.temperature;
                        has-value: ViewModel.have-data;
                    }
                    HumidityBar {
                        value: ViewModel.weather.humidity;
                        has-value: ViewModel.have-data;
                    }
                }

            }

            Tab {
                title: "Records";
                Flickable {
                    VerticalLayout {
                    for record in ViewModel.records : Rectangle {
                        HorizontalBox {
                            Text {
                                text: record.timestamp;
                            }
                            Text {
                                text: Math.round(record.temperature) + "°C";
                            }
                            Text {
                                text: Math.round(record.humidity) + "%";
                            }
                        }
                    }}
                }        
            }
        }

        StatusBar {
            text: ViewModel.records[ViewModel.records.length - 1].timestamp;
        }
    }
}
